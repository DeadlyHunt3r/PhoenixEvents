<recyclerItem>
  <page activeBegin="01/01/0001 00:00:00" activeEnd="01/01/0001 00:00:00" alwaysBuild="False" dontCachePageItems="False" expirationDate="01/01/0001 00:00:00" fileName="sudoku" fileType="" folderName="" id="624" parentID="603" isActive="True" language2="de" metaKeywords="" name="Sudoku" objectID="de$sudoku" sitemapFlag="False" targetNoFollow="False" targetUrl="" targetTarget="" templateFile="" title="" type="Page" orderPosition="5" isVisible="True" hideInTree="False" rootFolderName="/" projectFolderLanguage2="de">
    <description />
    <container orderPosition="1" areaName="Standard">
      <paragraph orderPosition="0" areaName="Standard">
        <value name="column-count">1</value>
        <value name="column-width-1">100</value>
        <value name="column-width-unit-1">%</value>
        <column orderPosition="0" areaName="Standard">
          <value name="width">100</value>
          <value name="width-unit">%</value>
          <pageItem name="" activeBegin="01/01/0001 00:00:00" activeEnd="01/01/0001 00:00:00" alwaysBuild="False" areaName="Standard" isActive="True" objectID="a6cd0713-89ac-4fad-b2bc-643d23c48170" rssFlag="False" styleName="quelltext-(html)" editorType="None" orderPosition="1" itemTemplateName="standard" wasCopiedFromArticleObjectID="a6cd0713-89ac-4fad-b2bc-643d23c48170">
            <excerpt>Sudoku body { font-family: 'Arial', sans-serif; text-align: center; margin: 0; padding: 0; background-color: #f0f8ff; } h1 { margin-top: 20px; color: #444; font-size: 2.5em; letter-spacing: 2px; } .sudoku-container { display: inline-block; margin: 20px auto; padding: 15px; background: #ffffff; border: 3px solid #444; border-radius: 10px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); } .grid { display: grid; grid-template-columns: repeat(9, 50px); grid-template-rows: repeat(9, 50px); gap: 0; background-color: #444; padding: 5px; border-radius: 5px; } .cell { width: 50px; height: 50px; background: #fefefe; display: flex; justify-content: center; align-items: center; border: 1px solid #999; font-size: 1.2em; font-weight: bold; box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1); } .cell:nth-child(3n+1) { border-left: 2px solid #444; } .cell:nth-child(-n+9) { border-top: 2px solid #444; } .cell:nth-child(27n+1), .cell:nth-child(27n+10), .cell:nth-child(27n+19) { border-top: 2px solid #444; } .cell input { width: 100%; height: 100%; text-align: center; font-size: 1.2em; font-weight: bold; color: #333; border: none; outline: none; background: transparent; } .cell input:focus { background: #d4f0ff; } .cell.fixed { background: #e9ecef; color: #555; } .controls { margin-top: 20px; } button { padding: 10px 20px; font-size: 1em; font-weight: bold; color: white; background: #007BFF; border: none; border-radius: 5px; cursor: pointer; transition: background 0.3s; } button:hover { background: #0056b3; } Sudoku Lösung prüfen Zurücksetzen const initialPuzzle = [ [5, 3, '', '', 7, '', '', '', ''], [6, '', '', 1, 9, 5, '', '', ''], ['', 9, 8, '', '', '', '', 6, ''], [8, '', '', '', 6, '', '', '', 3], [4, '', '', 8, '', 3, '', '', 1], [7, '', '', '', 2, '', '', '', 6], ['', 6, '', '', '', '', 2, 8, ''], ['', '', '', 4, 1, 9, '', '', 5], ['', '', '', '', 8, '', '', 7, 9] ]; const grid = document.getElementById('grid'); function createGrid() { grid.innerHTML = ''; initialPuzzle.forEach((row, rowIndex) =&lt; 9; j++) { const index = i * 9 + j; const value = cells[index]?.value || initialPuzzle[i][j]; userSolution[i][j] = parseInt(value) || ''; } } // Validate rows, columns, and boxes if (isValidSolution(userSolution)) { alert('Gut gemacht! Das Puzzle ist korrekt gelöst!'); } else { alert('Die Lösung ist falsch. Bitte versuche es erneut.'); } } function isValidSolution(solution) { // Check rows and columns for (let i = 0; i</excerpt>
            <value name="Text">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;Sudoku&lt;/title&gt;
    &lt;style&gt;
        body {
            font-family: 'Arial', sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
            background-color: #f0f8ff;
        }
        h1 {
            margin-top: 20px;
            color: #444;
            font-size: 2.5em;
            letter-spacing: 2px;
        }
        .sudoku-container {
            display: inline-block;
            margin: 20px auto;
            padding: 15px;
            background: #ffffff;
            border: 3px solid #444;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(9, 50px);
            grid-template-rows: repeat(9, 50px);
            gap: 0;
            background-color: #444;
            padding: 5px;
            border-radius: 5px;
        }
        .cell {
            width: 50px;
            height: 50px;
            background: #fefefe;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid #999;
            font-size: 1.2em;
            font-weight: bold;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .cell:nth-child(3n+1) {
            border-left: 2px solid #444;
        }
        .cell:nth-child(-n+9) {
            border-top: 2px solid #444;
        }
        .cell:nth-child(27n+1),
        .cell:nth-child(27n+10),
        .cell:nth-child(27n+19) {
            border-top: 2px solid #444;
        }
        .cell input {
            width: 100%;
            height: 100%;
            text-align: center;
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
            border: none;
            outline: none;
            background: transparent;
        }
        .cell input:focus {
            background: #d4f0ff;
        }
        .cell.fixed {
            background: #e9ecef;
            color: #555;
        }
        .controls {
            margin-top: 20px;
        }
        button {
            padding: 10px 20px;
            font-size: 1em;
            font-weight: bold;
            color: white;
            background: #007BFF;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }
        button:hover {
            background: #0056b3;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Sudoku&lt;/h1&gt;
    &lt;div class="sudoku-container"&gt;
        &lt;div class="grid" id="grid"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="controls"&gt;
        &lt;button onclick="checkSolution()"&gt;Lösung prüfen&lt;/button&gt;
        &lt;button onclick="resetGrid()"&gt;Zurücksetzen&lt;/button&gt;
    &lt;/div&gt;

    &lt;script&gt;
        const initialPuzzle = [
            [5, 3, '', '', 7, '', '', '', ''],
            [6, '', '', 1, 9, 5, '', '', ''],
            ['', 9, 8, '', '', '', '', 6, ''],
            [8, '', '', '', 6, '', '', '', 3],
            [4, '', '', 8, '', 3, '', '', 1],
            [7, '', '', '', 2, '', '', '', 6],
            ['', 6, '', '', '', '', 2, 8, ''],
            ['', '', '', 4, 1, 9, '', '', 5],
            ['', '', '', '', 8, '', '', 7, 9]
        ];

        const grid = document.getElementById('grid');

        function createGrid() {
            grid.innerHTML = '';
            initialPuzzle.forEach((row, rowIndex) =&gt; {
                row.forEach((value, colIndex) =&gt; {
                    const cell = document.createElement('div');
                    cell.className = 'cell';

                    if (value) {
                        cell.textContent = value;
                        cell.classList.add('fixed');
                    } else {
                        const input = document.createElement('input');
                        input.type = 'number';
                        input.min = 1;
                        input.max = 9;
                        input.oninput = validateInput;
                        cell.appendChild(input);
                    }

                    grid.appendChild(cell);
                });
            });
        }

        function validateInput(event) {
            const value = event.target.value;
            if (value &lt; 1 || value &gt; 9) {
                event.target.value = '';
            }
        }

        function checkSolution() {
            const cells = document.querySelectorAll('.grid .cell input');
            const userSolution = [];

            // Create a 2D array of the user's input
            for (let i = 0; i &lt; 9; i++) {
                userSolution[i] = [];
                for (let j = 0; j &lt; 9; j++) {
                    const index = i * 9 + j;
                    const value = cells[index]?.value || initialPuzzle[i][j];
                    userSolution[i][j] = parseInt(value) || '';
                }
            }

            // Validate rows, columns, and boxes
            if (isValidSolution(userSolution)) {
                alert('Gut gemacht! Das Puzzle ist korrekt gelöst!');
            } else {
                alert('Die Lösung ist falsch. Bitte versuche es erneut.');
            }
        }

        function isValidSolution(solution) {
            // Check rows and columns
            for (let i = 0; i &lt; 9; i++) {
                const row = new Set();
                const col = new Set();
                for (let j = 0; j &lt; 9; j++) {
                    // Check rows
                    if (solution[i][j]) {
                        if (row.has(solution[i][j])) return false;
                        row.add(solution[i][j]);
                    }

                    // Check columns
                    if (solution[j][i]) {
                        if (col.has(solution[j][i])) return false;
                        col.add(solution[j][i]);
                    }
                }
            }

            // Check 3x3 boxes
            for (let boxRow = 0; boxRow &lt; 3; boxRow++) {
                for (let boxCol = 0; boxCol &lt; 3; boxCol++) {
                    const box = new Set();
                    for (let i = 0; i &lt; 3; i++) {
                        for (let j = 0; j &lt; 3; j++) {
                            const row = boxRow * 3 + i;
                            const col = boxCol * 3 + j;
                            const value = solution[row][col];
                            if (value) {
                                if (box.has(value)) return false;
                                box.add(value);
                            }
                        }
                    }
                }
            }

            return true;
        }

        function resetGrid() {
            createGrid();
        }

        createGrid();
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</value>
            <dynamicSettings>
              <value name="name-align" />
              <value name="name-color" />
              <value name="name-level">h2</value>
            </dynamicSettings>
          </pageItem>
        </column>
      </paragraph>
    </container>
  </page>
</recyclerItem>